.TH "md___users_vadimpiven__development_irrpoly__r_e_a_d_m_e" 3 "Ср 13 Ноя 2019" "Version 1.0.0" "irrpoly" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md___users_vadimpiven__development_irrpoly__r_e_a_d_m_e \- Проверка многочленов на неприводимость и примитивность над заданным полем Галуа 

.SH "Требования"
.PP
Для работы программы необходимо наличие:
.IP "\(bu" 2
компилятора с поддержкой C++ 17
.IP "\(bu" 2
Cmake 3\&.8 для сборки проекта
.IP "\(bu" 2
64-битного процессора с как минимум двумя ядрами
.PP
.PP
При сборке данного проекта проверяется наличие библиотеки POSIX threads, в случае наличия программа с ней линкуется, в противном случае для многопоточности используются потоки \fCstd::thread\fP\&.
.SH "Состав"
.PP
Данная программа состоит из нескольких классов:
.IP "\(bu" 2
gf - класс чисел над полем Галуа заданной характеристика
.IP "\(bu" 2
polynomial - класс арифметики многочленов
.IP "\(bu" 2
polynomialgf - многочлены над полем Галуа
.IP "\(bu" 2
checker - реализует проверку многочленов на неприводимость и примитивность в несколько потоков
.PP
.PP
В файле \fCpolynomialgf\&.hpp\fP реализованы следующие алгоритмы:
.IP "\(bu" 2
поиск наибольшего общего делителя двух многочленов
.IP "\(bu" 2
проверка многочлена на неприводимость методом Берлекампа
.IP "\(bu" 2
проверка многочлена на неприводимость методом Рабина
.IP "\(bu" 2
проверка многочлена на примитивность
.PP
.SH "Документация"
.PP
Описание кода программы может быть найдено в папке [docs](docs) или на соответствующей странице \fCGitHub Pages\fP\&.
.PP
Сборка проекта и обновление документации может выполняться с использованием [Makefile](Makefile)\&. Доступные команды:
.IP "\(bu" 2
\fCmake debug\fP - сборка версии Debug
.IP "\(bu" 2
\fCmake release\fP - сборка версии Release
.IP "\(bu" 2
\fCmake docs\fP - перегенерация документации (требуется установленный Doxygen)
.PP
.SH "Использование"
.PP
Для использования программы требуется определиться с тем, какие именно многочлены нужно получить:
.IP "\(bu" 2
характеристика поля Галуа
.IP "\(bu" 2
степень многочленов
.IP "\(bu" 2
их количество
.IP "\(bu" 2
неприводимость или примитивность требуется проверять
.IP "\(bu" 2
порядок перебора многочленов
.PP
.PP
После чего требуется необходимым образом модифицировать функцию-шаблон в \fCmain\&.cpp\fP\&. Скорее всего потребуется реализовать собственный неслучайный способ подбора многочленов на проверку\&.
.SH "Тестирование"
.PP
Тестовая функция \fCtest()\fP находится в \fCmain\&.cpp\fP\&. Она генерирует случайные многочлены и выполняет их проверку на неприводимость и примитивность\&. Затем эти многочлены копируюстя в файл [test_input](test_input) и загружаются в \fCWolfram Notebook\fP, и с помощью Wolfram Mathematica выполняется проверка полученного результата\&. Было проверено более 500 многочленов над различными полями Галуа, для всех них результат работы программы оказался правильным\&. 
