.TH "include/irrpoly/gfpoly.hpp" 3 "Вт 28 Апр 2020" "Version 2.0.0" "irrpoly" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/irrpoly/gfpoly.hpp
.SH SYNOPSIS
.br
.PP
\fC#include 'gf\&.hpp'\fP
.br
\fC#include <vector>\fP
.br
\fC#include <cassert>\fP
.br
\fC#include <ostream>\fP
.br
\fC#include <algorithm>\fP
.br
\fC#include <functional>\fP
.br
\fC#include <initializer_list>\fP
.br
\fC#include <string>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <cctype>\fP
.br

.SS "Классы"

.in +1c
.ti -1c
.RI "class \fBirrpoly::gfpoly\fP"
.br
.in -1c
.SS "Функции"

.in +1c
.ti -1c
.RI "auto \fBirrpoly::operator\-\fP (gfpoly a) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator+\fP (const gfpoly &a, const gfpoly &b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator+\fP (gfpoly &&a, const gfpoly &b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator+\fP (const gfpoly &a, gfpoly &&b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator+\fP (gfpoly &&a, gfpoly &&b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator\-\fP (const gfpoly &a, const gfpoly &b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator\-\fP (gfpoly &&a, const gfpoly &b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator\-\fP (const gfpoly &a, gfpoly &&b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator\-\fP (gfpoly &&a, gfpoly &&b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator*\fP (const gfpoly &a, const gfpoly &b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator/\fP (const gfpoly &a, const gfpoly &b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator%\fP (const gfpoly &a, const gfpoly &b) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator+\fP (gfpoly a, const U &b) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator\-\fP (gfpoly a, const U &b) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator*\fP (gfpoly a, const U &b) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator/\fP (gfpoly a, const U &b) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator%\fP (const gfpoly &a, const U &) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator+\fP (const U &a, gfpoly b) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator\-\fP (const U &a, gfpoly b) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator*\fP (const U &a, gfpoly b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator==\fP (const gfpoly &a, const gfpoly &b) \-> bool"
.br
.ti -1c
.RI "auto \fBirrpoly::operator!=\fP (const gfpoly &a, const gfpoly &b) \-> bool"
.br
.ti -1c
.RI "template<typename U > auto \fBirrpoly::operator>>\fP (gfpoly a, const U &b) \-> gfpoly"
.br
.ti -1c
.RI "template<typename U > auto \fBirrpoly::operator<<\fP (gfpoly a, const U &b) \-> gfpoly"
.br
.ti -1c
.RI "template<class charT , class traits > auto \fBirrpoly::operator<<\fP (std::basic_ostream< charT, traits > &os, const gfpoly &poly) \-> std::basic_ostream< charT, traits > &"
.br
.ti -1c
.RI "template<class charT , class traits > auto \fBirrpoly::operator>>\fP (std::basic_istream< charT, traits > &is, gfpoly &poly) \-> std::basic_istream< charT, traits > &"
.br
.in -1c
.SH "Подробное описание"
.PP 

.PP
\fBАвтор\fP
.RS 4
Vadim Piven vadim@piven.tech @license Free use of this library is permitted under the guidelines and in accordance with the MIT License (MIT)\&. @url https://github.com/irreducible-polynoms/irrpoly 
.RE
.PP

.SH "Автор"
.PP 
Автоматически создано Doxygen для irrpoly из исходного текста\&.
