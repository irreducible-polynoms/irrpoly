.TH "include/irrpoly/gfpoly.hpp" 3 "Пт 8 Май 2020" "Version 2.1.0" "irrpoly" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/irrpoly/gfpoly.hpp
.SH SYNOPSIS
.br
.PP
\fC#include 'gf\&.hpp'\fP
.br
\fC#include <vector>\fP
.br
\fC#include <functional>\fP
.br
\fC#include <initializer_list>\fP
.br
\fC#include <string>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <cctype>\fP
.br

.SS "Классы"

.in +1c
.ti -1c
.RI "class \fBirrpoly::gfpoly\fP"
.br
.in -1c
.SS "Макросы"

.in +1c
.ti -1c
.RI "#define \fBCHECK_FIELD\fP(comparison)"
.br
.in -1c
.SS "Функции"

.in +1c
.ti -1c
.RI "auto \fBirrpoly::operator\-\fP (gfpoly a) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator+\fP (const gfpoly &a, const gfpoly &b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator+\fP (gfpoly &&a, const gfpoly &b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator+\fP (const gfpoly &a, gfpoly &&b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator+\fP (gfpoly &&a, gfpoly &&b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator\-\fP (const gfpoly &a, const gfpoly &b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator\-\fP (gfpoly &&a, const gfpoly &b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator\-\fP (const gfpoly &a, gfpoly &&b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator\-\fP (gfpoly &&a, gfpoly &&b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator*\fP (const gfpoly &a, const gfpoly &b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator/\fP (const gfpoly &a, const gfpoly &b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator%\fP (const gfpoly &a, const gfpoly &b) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator+\fP (gfpoly a, const U &b) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator\-\fP (gfpoly a, const U &b) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator*\fP (gfpoly a, const U &b) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator/\fP (gfpoly a, const U &b) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator%\fP (const gfpoly &a, const U &) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator+\fP (const U &a, gfpoly b) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator\-\fP (const U &a, gfpoly b) \-> gfpoly"
.br
.ti -1c
.RI "template<class U > auto \fBirrpoly::operator*\fP (const U &a, gfpoly b) \-> gfpoly"
.br
.ti -1c
.RI "auto \fBirrpoly::operator==\fP (const gfpoly &a, const gfpoly &b) \-> bool"
.br
.ti -1c
.RI "auto \fBirrpoly::operator!=\fP (const gfpoly &a, const gfpoly &b) \-> bool"
.br
.ti -1c
.RI "template<typename U > auto \fBirrpoly::operator>>\fP (gfpoly a, const U &b) \-> gfpoly"
.br
.ti -1c
.RI "template<typename U > auto \fBirrpoly::operator<<\fP (gfpoly a, const U &b) \-> gfpoly"
.br
.ti -1c
.RI "template<class charT , class traits > auto \fBirrpoly::operator<<\fP (std::basic_ostream< charT, traits > &os, const gfpoly &poly) \-> std::basic_ostream< charT, traits > &"
.br
.ti -1c
.RI "template<class charT , class traits > auto \fBirrpoly::operator>>\fP (std::basic_istream< charT, traits > &is, gfpoly &poly) \-> std::basic_istream< charT, traits > &"
.br
.in -1c
.SH "Подробное описание"
.PP 

.PP
\fBАвтор\fP
.RS 4
Vadim Piven vadim@piven.tech @license Free use of this library is permitted under the guidelines and in accordance with the MIT License (MIT)\&. @url https://github.com/irreducible-polynoms/irrpoly 
.RE
.PP

.SH "Макросы"
.PP 
.SS "#define CHECK_FIELD(comparison)"
\fBМакроопределение:\fP
.PP
.nf
    if (!(comparison)) { \
        throw std::logic_error("field check failed"); \
    }
.fi
Бинарные операции над gfn корректно определены лишь в том случае, когда оба числа принадлежат одному и тому же полю\&. По умолчанию, проверка этого факта выполняется только для конфигурации Debug, чтобы в конфигурации Release добиться наибольшей производительности\&. Однако, если в конфигурации Release проверки также требуется выполнять, достаточно объявить #define IRRPOLY_RELEASE_CHECKED перед подключением заголовочного файла #include <irrpoly\&.h> 
.SH "Автор"
.PP 
Автоматически создано Doxygen для irrpoly из исходного текста\&.
