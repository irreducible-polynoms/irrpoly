.TH "/Users/vadimpiven/Development/irrpoly/polynomialgf.hpp" 3 "Чт 14 Ноя 2019" "Version 1.0.0" "irrpoly" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/vadimpiven/Development/irrpoly/polynomialgf.hpp
.SH SYNOPSIS
.br
.PP
\fC#include <algorithm>\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <stdexcept>\fP
.br
\fC#include <vector>\fP
.br
\fC#include 'gf\&.hpp'\fP
.br
\fC#include 'polynomial\&.hpp'\fP
.br
\fC#include 'checker\&.hpp'\fP
.br

.SS "Классы"

.in +1c
.ti -1c
.RI "struct \fBirrpoly::multithread::result_type\fP"
.br
.RI "Структура, представляющая результаты проверки многочлена\&. "
.in -1c
.SS "Определения типов"

.in +1c
.ti -1c
.RI "template<uint32_t P = 2> using \fBirrpoly::polynomialgf\fP = polynomial< gf< P > >"
.br
.RI "Класс многочленов над полем Галуа\&. "
.ti -1c
.RI "template<uint32_t P> using \fBirrpoly::multithread::polychecker\fP = checker< polynomialgf< P >, result_type >"
.br
.in -1c
.SS "Перечисления"

.in +1c
.ti -1c
.RI "enum \fBirrpoly::multithread::irreducible_method\fP { \fBirrpoly::multithread::irreducible_method::nil\fP, \fBirrpoly::multithread::irreducible_method::berlekamp\fP, \fBirrpoly::multithread::irreducible_method::rabin\fP }"
.br
.RI "Доступные методы проверки нанеприводимость\&. "
.ti -1c
.RI "enum \fBirrpoly::multithread::primitive_method\fP { \fBirrpoly::multithread::primitive_method::nil\fP, \fBirrpoly::multithread::primitive_method::definition\fP }"
.br
.RI "Доступные методы проверки примитивность\&. "
.in -1c
.SS "Функции"

.in +1c
.ti -1c
.RI "template<uint32_t P> polynomialgf< P > \fBirrpoly::gcd\fP (polynomialgf< P > m, polynomialgf< P > n)"
.br
.ti -1c
.RI "template<uint32_t P> polynomialgf< P > \fBirrpoly::detail::derivative\fP (const polynomialgf< P > &val)"
.br
.RI "Вычисляет производную данного многочлена\&. "
.ti -1c
.RI "template<uint32_t P> polynomialgf< P > \fBirrpoly::detail::x_pow_mod_sub\fP (uint64_t pow, const polynomialgf< P > &mod, const polynomialgf< P > &sub=polynomialgf< P >({0})) noexcept"
.br
.ti -1c
.RI "template<uint32_t P> bool \fBirrpoly::is_irreducible_berlekamp\fP (const polynomialgf< P > &val)"
.br
.ti -1c
.RI "template<uint32_t P> polynomialgf< P > \fBirrpoly::random\fP (typename polynomialgf< P >::size_type degree)"
.br
.RI "Генерирует случайный многочлен над полем GF[P] заданной степени\&. "
.ti -1c
.RI "template<uint32_t P> bool \fBirrpoly::is_primitive_definition\fP (const polynomialgf< P > &val)"
.br
.ti -1c
.RI "template<uint32_t P> bool \fBirrpoly::is_irreducible_rabin\fP (const polynomialgf< P > &val)"
.br
.ti -1c
.RI "template<uint32_t P> checker< polynomialgf< P >, result_type >::check_func \fBirrpoly::multithread::make_check_func\fP (irreducible_method irr_meth, primitive_method prim_meth)"
.br
.RI "Формируется универсальная функция проверки многочленов\&. "
.in -1c
.SH "Подробное описание"
.PP 

.PP
\fBАвтор\fP
.RS 4
Vadim Piven vadim@piven.tech, Anastasia Chekhoeva A89168226876@yandex.ru, Veronika Biryukova biryukovaveronika@mail.ru, Igor Bogdanov bogdanov.igor.98@mail.ru, Vadim Volkov volk.vad.p@gmail.com, Zimin Fedor zimfv@yandex.ru, Cheshkova Anna cheshkoann@gmail.com @license Free use of this library is permitted under the guidelines and in accordance with the MIT License (MIT)\&. @url https://github.com/irreducible-polynoms/irrpoly 
.RE
.PP

.SH "Функции"
.PP 
.SS "template<uint32_t P> polynomialgf<P> irrpoly::gcd (\fBpolynomialgf\fP< P > m, \fBpolynomialgf\fP< P > n)"
Расширенный алгоритм Евклида для поиска наибольшего общего делителя (greatest common divisor) двух многочленов\&. Реализация сделана на основе кода из библиотеки Boost 1\&.71\&.0\&. 
.SS "template<uint32_t P> bool irrpoly::is_irreducible_berlekamp (const \fBpolynomialgf\fP< P > & val)"
Алгоритм Берлекампа проверки многочлена на неприводимость в поле GF[P]\&. Первый шаг - вычисление производной данного многочлена\&. Если производная равна нулю, то многочлен является степенью какого-то другого многочлена, то есть он приводим\&. Второй шаг - поиск общих множителей многочлена и его производной\&. Если общие множители (многочлены, а не числа) есть, т\&.е\&. многочлены не взаимно просты, то val делится на них, т\&.е\&. он не неприводим\&. Третий шаг - простоение матрицы Берлекампа и вычисление её ранга\&. Строится матрица M[nxn], где строки - коэффициенты многочлена x^(iP) (mod val), где P - основание поля галуа, 0 < i < n, val - текущий многочлен над полем GF[P]\&. Подробное описание и пример расчёта можно найти в статье 'A Formalization of Berlekamp’s Factorization Algorithm' по ссылке http://www21.in.tum.de/~nipkow/Isabelle2016/Isabelle2016_6.pdf (стр\&. 3-4)\&. Из матрицы M вычитается единичная матрица и получается матрица Берлекампа\&. Если ранг матрицы Берлекампа равен степени многочлена минус 1, то многочлен неприводим\&. Для вычисления ранга используется приведение матрицы к ступенчатому виду и подсчёт числа ступеней в ней\&. Кроме того, все многочлены первой степени неприводимы в любом поле\&. 
.PP
\fBАвтор\fP
.RS 4
Vadim Piven vadim@piven.tech 
.RE
.PP

.SS "template<uint32_t P> bool irrpoly::is_irreducible_rabin (const \fBpolynomialgf\fP< P > & val)"
Алгоритм Рабина проверки многочлена на неприводимость в поле GF[P]\&. Для использования алгоритма предварительно строится список простых множителей для числа n - степени многочлена\&. Вместо множителей в список добавляется отношение n_i = n / d_i, где d_i - простой делитель (divisor) n\&. Если n - простое, то список состоит из одной единицы\&. Далее выполняется несколько шагов:
.IP "1." 4
строится многочлен temp = x^(P ^ n_i) - x (mod val)
.IP "2." 4
находится наиболиший общий дилитель temp и val, если НОД не константе, отличной от нуля, то это многочлен, и val, очевидно, делится на него, а значит приводим\&.
.IP "3." 4
если условия 1-2 выполнены для всех n_i, проверяем их для n\&. Если для n получаем результат 0, то val неприводим\&. Кроме того, все многочлены первой степени неприводимы в любом поле\&. Подробную информацию по алгоритму можно найти здесь: https://www.fing.edu.uy/inco/pedeciba/bibliote/reptec/TR0116.pdf или на странице Википедии в разделе Rabin's test of irreducibility https://en.wikipedia.org/wiki/Factorization_of_polynomials_over_finite_fields 
.PP
\fBАвтор\fP
.RS 4
Anastasia Chekhoeva A89168226876@yandex.ru 
.RE
.PP

.PP

.SS "template<uint32_t P> bool irrpoly::is_primitive_definition (const \fBpolynomialgf\fP< P > & val)"
Алгоритм проверки многочлена на примитивность по определению\&. Многочлен является примитивным над полем GF[P], если выполнены три условия:
.IP "1." 4
элемент mp = (-1)^n * val[0] является примитивным элементом поля GF[P^n], т\&.е\&. k^((p-1) / q) != 1 для каждого q - простого множителя P-1 данный пункт не применим для P = 2 по объективным причинам
.IP "2." 4
x^r = k (mod val), где r = (p^n - 1) / (p - 1)
.IP "3." 4
deg[x^(r / q) (mod val)] > 0 для каждого 1 < q < r - простого множителя r Кроме того, многочлен x является примитивным для любого поля GF[P]\&. 
.PP
\fBАвтор\fP
.RS 4
Veronika Biryukova biryukovaveronika@mail.ru 
.RE
.PP

.PP

.SS "template<uint32_t P> polynomialgf<P> irrpoly::detail::x_pow_mod_sub (uint64_t pow, const \fBpolynomialgf\fP< P > & mod, const \fBpolynomialgf\fP< P > & sub = \fC\fBpolynomialgf\fP<P>({0})\fP)\fC [noexcept]\fP"
Вычисляет значение (x^pow - sub) % mod\&. 
.PP
\fBАргументы\fP
.RS 4
\fIpow\fP степень, в которую требуется возвести x 
.br
\fImod\fP многочлен, остаток деления на который необходимо найти 
.br
\fIsub\fP вычитаемое, в случае, когда степень многочлена sub меньше степени многочлена mod, можно заменить (x^pow - sub) % mod на (x^pow % mod) - sub без изменения результата, таким образом использование данной функции возможно только в подобной ситуации; это и происходит, поскольку в методе Берлекампа она вызывается всегда с sub = 0, в проверке на примитивность всегда с sub равным константе, при этом mod - как минимум первой степени, поэтому условие выполнено, в методе Рабина sub = x, но при этом mod как минимум второй степени, т\&.к\&. все многочлены первой степени неприводимы, что обеспечивает возврат не доходя до вызова данной функции 
.RE
.PP

.SH "Автор"
.PP 
Автоматически создано Doxygen для irrpoly из исходного текста\&.
