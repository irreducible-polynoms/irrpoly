.TH "irrpoly::gfpoly" 3 "Вс 26 Апр 2020" "Version 2.0.0" "irrpoly" \" -*- nroff -*-
.ad l
.nh
.SH NAME
irrpoly::gfpoly
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <gfpoly\&.hpp>\fP
.SS "Открытые члены"

.in +1c
.ti -1c
.RI "\fBgfpoly\fP & \fBnormalize\fP ()"
.br
.ti -1c
.RI "\fBgfpoly\fP (const \fBgf\fP &field)"
.br
.ti -1c
.RI "\fBgfpoly\fP (const \fBgf\fP &field, const std::vector< uintmax_t > &l)"
.br
.ti -1c
.RI "\fBgfpoly\fP (const \fBgf\fP &field, std::vector< uintmax_t > &&l)"
.br
.ti -1c
.RI "\fBgfpoly\fP (const \fBgf\fP &field, std::initializer_list< uintmax_t > l)"
.br
.ti -1c
.RI "\fBgfpoly\fP (const \fBgfpoly\fP &p)=default"
.br
.ti -1c
.RI "\fBgfpoly\fP (\fBgfpoly\fP &&p)=default"
.br
.ti -1c
.RI "\fBgfpoly\fP (\fBgfn\fP value)"
.br
.ti -1c
.RI "\fBgfpoly\fP (const \fBgf\fP &field, uintmax_t value)"
.br
.ti -1c
.RI "const \fBgf\fP & \fBfield\fP () const"
.br
.ti -1c
.RI "uintmax_t \fBbase\fP () const"
.br
.ti -1c
.RI "uintmax_t \fBsize\fP () const"
.br
.ti -1c
.RI "uintmax_t \fBdegree\fP () const"
.br
.ti -1c
.RI "\fBgfn\fP & \fBoperator[]\fP (uintmax_t i)"
.br
.ti -1c
.RI "const \fBgfn\fP & \fBoperator[]\fP (uintmax_t i) const"
.br
.ti -1c
.RI "const std::vector< \fBgfn\fP > & \fBdata\fP () const"
.br
.ti -1c
.RI "\fBgfpoly\fP & \fBoperator=\fP (const \fBgfpoly\fP &p)"
.br
.ti -1c
.RI "bool \fBis_zero\fP () const"
.br
.ti -1c
.RI "\fBoperator bool\fP () const"
.br
.ti -1c
.RI "\fBgfpoly\fP & \fBset_zero\fP ()"
.br
.ti -1c
.RI "template<class U > \fBgfpoly\fP & \fBoperator+=\fP (const U &value)"
.br
.ti -1c
.RI "template<class U > \fBgfpoly\fP & \fBoperator\-=\fP (const U &value)"
.br
.ti -1c
.RI "template<class U > \fBgfpoly\fP & \fBoperator*=\fP (const U &value)"
.br
.ti -1c
.RI "template<class U > \fBgfpoly\fP & \fBoperator/=\fP (const U &value)"
.br
.ti -1c
.RI "template<class U > \fBgfpoly\fP & \fBoperator%=\fP (const U &)"
.br
.ti -1c
.RI "\fBgfpoly\fP & \fBoperator+=\fP (const \fBgfpoly\fP &value)"
.br
.ti -1c
.RI "\fBgfpoly\fP & \fBoperator\-=\fP (const \fBgfpoly\fP &value)"
.br
.ti -1c
.RI "\fBgfpoly\fP & \fBoperator*=\fP (const \fBgfpoly\fP &value)"
.br
.ti -1c
.RI "\fBgfpoly\fP & \fBoperator/=\fP (const \fBgfpoly\fP &value)"
.br
.ti -1c
.RI "\fBgfpoly\fP & \fBoperator%=\fP (const \fBgfpoly\fP &value)"
.br
.ti -1c
.RI "template<typename U > \fBgfpoly\fP & \fBoperator>>=\fP (U const &n)"
.br
.ti -1c
.RI "template<typename U > \fBgfpoly\fP & \fBoperator<<=\fP (U const &n)"
.br
.in -1c
.SS "Открытые статические члены"

.in +1c
.ti -1c
.RI "static \fBgfpoly\fP \fBrandom\fP (const \fBgf\fP &field, uintmax_t degree)"
.br
.RI "Генерирует случайный многочлен над полем GF[P] заданной степени\&. "
.ti -1c
.RI "static std::vector< uintmax_t > \fBinto_vec\fP (\fBgfpoly\fP &&poly)"
.br
.in -1c
.SS "Друзья"

.in +1c
.ti -1c
.RI "\fBgfpoly\fP \fBoperator\-\fP (\fBgfpoly\fP)"
.br
.ti -1c
.RI "\fBgfpoly\fP \fBoperator*\fP (const \fBgfpoly\fP &, const \fBgfpoly\fP &)"
.br
.ti -1c
.RI "\fBgfpoly\fP \fBoperator/\fP (const \fBgfpoly\fP &, const \fBgfpoly\fP &)"
.br
.ti -1c
.RI "\fBgfpoly\fP \fBoperator%\fP (const \fBgfpoly\fP &, const \fBgfpoly\fP &)"
.br
.in -1c
.SH "Подробное описание"
.PP 
Класс gfpoly представляет многочлены над полем Галуа\&. Основан на классе polynomial из библиотеки Boost\&. 

.SH "Автор"
.PP 
Автоматически создано Doxygen для irrpoly из исходного текста\&.
