.TH "irrpoly::gfpoly" 3 "Mon Jun 15 2020" "Version 2.2.1" "irrpoly" \" -*- nroff -*-
.ad l
.nh
.SH NAME
irrpoly::gfpoly
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <gfpoly\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "auto \fBvalue\fP () const \-> std::vector< uintmax_t >"
.br
.ti -1c
.RI "\fBgfpoly\fP (const \fBgf\fP &field)"
.br
.ti -1c
.RI "\fBgfpoly\fP (const \fBgf\fP &field, const std::vector< uintmax_t > &l)"
.br
.ti -1c
.RI "auto \fBoperator=\fP (const std::vector< uintmax_t > &l) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "\fBgfpoly\fP (const \fBgf\fP &field, std::initializer_list< uintmax_t > l)"
.br
.ti -1c
.RI "auto \fBoperator=\fP (std::initializer_list< uintmax_t > l) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "\fBgfpoly\fP (const \fBgfpoly\fP &p)=default"
.br
.ti -1c
.RI "\fBgfpoly\fP (\fBgfpoly\fP &&p)=default"
.br
.ti -1c
.RI "auto \fBoperator=\fP (const \fBgfpoly\fP &p) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "\fBgfpoly\fP (\fBgfn\fP \fBvalue\fP)"
.br
.ti -1c
.RI "auto \fBoperator=\fP (\fBgfn\fP \fBvalue\fP) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "\fBgfpoly\fP (const \fBgf\fP &field, uintmax_t \fBvalue\fP)"
.br
.ti -1c
.RI "auto \fBoperator=\fP (uintmax_t \fBvalue\fP) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "auto \fBfield\fP () const \-> const \fBgf\fP &"
.br
.ti -1c
.RI "auto \fBbase\fP () const \-> uintmax_t"
.br
.ti -1c
.RI "auto \fBsize\fP () const \-> uintmax_t"
.br
.ti -1c
.RI "auto \fBdegree\fP () const \-> uintmax_t"
.br
.ti -1c
.RI "auto \fBoperator[]\fP (uintmax_t i) const \-> const \fBgfn\fP &"
.br
.ti -1c
.RI "auto \fBis_zero\fP () const \-> bool"
.br
.ti -1c
.RI "\fBoperator bool\fP () const"
.br
.ti -1c
.RI "auto \fBset_zero\fP () \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "template<class U > auto \fBoperator+=\fP (const U &\fBvalue\fP) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "template<class U > auto \fBoperator\-=\fP (const U &\fBvalue\fP) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "template<class U > auto \fBoperator*=\fP (const U &\fBvalue\fP) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "template<class U > auto \fBoperator/=\fP (const U &\fBvalue\fP) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "template<class U > auto \fBoperator%=\fP (const U &) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "auto \fBoperator+=\fP (const \fBgfpoly\fP &\fBvalue\fP) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "auto \fBoperator\-=\fP (const \fBgfpoly\fP &\fBvalue\fP) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "auto \fBoperator*=\fP (const \fBgfpoly\fP &\fBvalue\fP) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "auto \fBoperator/=\fP (const \fBgfpoly\fP &\fBvalue\fP) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "auto \fBoperator%=\fP (const \fBgfpoly\fP &\fBvalue\fP) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "template<typename U > auto \fBoperator>>=\fP (U const &n) \-> \fBgfpoly\fP &"
.br
.ti -1c
.RI "template<typename U > auto \fBoperator<<=\fP (U const &n) \-> \fBgfpoly\fP &"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static auto \fBrandom\fP (const \fBgf\fP &field, uintmax_t \fBdegree\fP) \-> \fBgfpoly\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "auto \fBoperator\-\fP (\fBgfpoly\fP) \-> \fBgfpoly\fP"
.br
.ti -1c
.RI "auto \fBoperator*\fP (const \fBgfpoly\fP &, const \fBgfpoly\fP &) \-> \fBgfpoly\fP"
.br
.ti -1c
.RI "auto \fBoperator/\fP (const \fBgfpoly\fP &, const \fBgfpoly\fP &) \-> \fBgfpoly\fP"
.br
.ti -1c
.RI "auto \fBoperator%\fP (const \fBgfpoly\fP &, const \fBgfpoly\fP &) \-> \fBgfpoly\fP"
.br
.ti -1c
.RI "auto \fBoperator==\fP (const \fBgfpoly\fP &, const \fBgfpoly\fP &) \-> bool"
.br
.ti -1c
.RI "auto \fBoperator!=\fP (const \fBgfpoly\fP &, const \fBgfpoly\fP &) \-> bool"
.br
.in -1c
.SH "Detailed Description"
.PP 
gfpoly represents a polynomial over Galois field\&. This class is originally taken from Boost library but was significantly changed\&. Get by index operation [i] returns polynomial term x^i\&. Polynomial is either zero or reduced which means that leading term is non-zero\&. 
.SH "Member Function Documentation"
.PP 
.SS "auto irrpoly::gfpoly::degree () const \-> uintmax_t \fC [inline]\fP"
Returns polynomial degree\&. For zero polynomial degree is undefined\&. 
.SS "template<typename U > auto irrpoly::gfpoly::operator<<= (U const & n) \-> \fBgfpoly\fP & \fC [inline]\fP"
Logically equal to operation this *= x^n\&. 
.SS "template<typename U > auto irrpoly::gfpoly::operator>>= (U const & n) \-> \fBgfpoly\fP & \fC [inline]\fP"
Logically equal to operation this /= x^n\&. Defined only when such devision is possible\&. 
.SS "auto irrpoly::gfpoly::operator[] (uintmax_t i) const \-> const \fBgfn\fP & \fC [inline]\fP"
Polynomial couldn't be mutated by index because it would be possible to replace some term by gfn instance with field different to polynomial's one\&. 
.SS "static auto irrpoly::gfpoly::random (const \fBgf\fP & field, uintmax_t degree) \-> \fBgfpoly\fP \fC [inline]\fP, \fC [static]\fP"
Generates random polynomial over provided Galois field of given degree\&. 
.SS "auto irrpoly::gfpoly::value () const \-> std::vector<uintmax_t> \fC [inline]\fP"
Returns copy of numeric representation of current polynomial\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for irrpoly from the source code\&.
